{$NDA 1 -1 'Pac Man'}Program PacMan;uses	Types,	GSOS,	Memory,	MiscTool,	QuickDraw,	Events,	Desk,	Controls,		Windows,	Menus,	TMLUtils;	const	PFX=6;	PFY=6;	PFWidth=67;	PFHeight=69;	NewPFX=79;	NewPFY=0;	NewPFWidth=67;	NewPFHeight=69;	WhitePFX=146;	WhitePFY=0;	WhitePFWidth=67;	WhitePFHeight=69;	PManX=213;	PManY=20;	PManWidth=5;	PManHeight=5;	BigPManX=213;	BigPManY=45;	BigPManWidth=17;	BigPManHeight=15;	GsX=213;	GsY=0;	GWidth=5;	GHeight=5;	NumbersX=79;	NumbersY=69;	NumberWidth=3;	NumberHeight=5;	FruitX=109;	FruitY=69;	FruitWidth=5;	FruitHeight=5;	FruitPosX=31;	FruitPosY=39;	BigDotX=233;	BigDotY=20;	BigDotWidth=3;	BigDotHeight=3;	ScoreX=70;	ScoreY=0;	LevelX=74;	LevelY=70;	LivesX=6;	LivesY=76;type	BitMapPtrType=^BitMapType;	BitMapType=Packed array[1..142,1..82] of byte; {Dummy Type}	MazeType=array [-5..71,0..69] of char;var	GamePause:Boolean;	MyStuffOpen:Boolean;	PFRgn,PFVisRgn:RgnHandle;	Times:integer;	NewPath,ThePath:MazeType;	GameTime:integer;	MazeDotsLeft:integer;	BigDotBlink:integer;	PLevel,PLives,PScore,PX,PY,PXPlus,PYPlus,PXPlusNew,PYPlusNew,PXTest,PYTest,PXOld,PYOld,	PAnimation,PDirection,PDirectionNew:integer;	GX,GY,GXPlus,GYPlus,GXPlusNew,GYPlusNew,GXTest,GYTest,GXOld,GYOld,	GXHome,GYHome,GAnimation,GDirection,GDirectionNew,GWellness,GTimer,GRunAway:Array [0..3] of integer;	OldTickCount:LongInt;	MyPortPtr:GrafPortPtr;	MyLocInfoPtr:LocInfoPtr;	MyBitMapPtr:BitMapPtrType;		MyWindPtr:WindowPtr;	MyColorTable:		record			FrameColor,			TitleColor,			TBarColor,			GrowColor,			InfoColor:integer;		end;		PPB1,PPB2,PPB3,PPB4,PPB5:PaintParam;		TheSourceRect:Rect;	TheDestPoint:Point;{$DefProc+}Procedure UpdateWindow;begin	TheSourceRect:=myWindPtr^.PortRect;	PaintPixels(PPB1);end;{$DefProc-}Procedure SetUpMyStuff;var	MyWind:ParamList;	TheRect:Rect;	TheFile:Text;	TheBitMapFile:File of BitMapType;	i,j:integer;begin	if BAnd(GetMasterSCB,$80) = 0 then		Times:= 1	else		Times:=2;	New(MyBitMapPtr);	New(MyLocInfoPtr);	with MyLocInfoPtr^ do		begin			PortSCB:=GetMasterSCB;			ptrToPixImage:=Ptr(MyBitMapPtr);			width:=142;			SetRect(boundsRect,0,0,284*Times,82);		end;		New(MyPortPtr);	OpenPort(MyPortPtr);	SetPortLoc(MyLocInfoPtr^);	SetPort(MyPortPtr);	SetSolidBackPat(0);	EraseRect(MyPortPtr^.PortRect);	if times =1 then		Reset(TheBitMapFile,'*/System/Desk.Accs/PacMan.320')	else		Reset(TheBitMapFile,'*/System/Desk.Accs/PacMan.640');	Read(TheBitMapFile,MyBitMapPtr^);	close(TheBitMapFile);	i:=-5;	j:=0;	Reset(TheFile,'*/System/Desk.Accs/PacMan.Maze');	while not eof(TheFile) do		begin			while not eoln(TheFile) and not eof(TheFile) do				begin					read(TheFile,ThePath[i,j]);					i:=i+1;				end;			readln(TheFile);			i:=-5;			j:=j+1;		end;	close(TheFile);	for i := -5 to 66 div 2-1 do		for j := 0 to 68 do			ThePath[66-i,j]:=ThePath[i,j];					NewPath:=ThePath;			with MyColorTable do		begin			frameColor:=$0000;			titleColor:=$0F00;			tBarColor:=$020F;			growColor:=$0000;			infoColor:=$00F0;		end;	With MyWind do		begin			paramLength:=Sizeof(ParamList);			wframeBits:=$C0C0;			wTitle:=@' Pac-Man ';			wRefCon:=0;			SetRect(wZoom,0,0,79*Times,81);			wColor:=@myColorTable;			wYOrigin:=0;			wXOrigin:=0;			wDataH:=81;			wDataW:=79;			wMaxH:=81;			wMaxW:=79;			wScrollVer:=0;			wScrollHor:=0;			wPageVer:=0;			wPageHor:=0;			wInfoRefCon:=0;			wInfoHeight:=0;			wFrameDefProc:=nil;			wInfoDefProc:=nil;			wContDefProc:=nil;			wPosition:=wZoom;			OffsetRect(wPosition,50*Times,50);			wPlane:=WindowPtr(-1);			wStorage:=nil;		end;	MyWindPtr:=NewWindow(myWind);	SetPort(MyWindPtr);	SetSolidBackPat(0);	ShowWindow(MyWindPtr);	PFRgn:=NewRgn;	PFVisRgn:=NewRgn;	SetRect(TheRect,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);	RectRgn(PFRgn,TheRect);	RectRgn(PFVisRgn,TheRect);		with PPB1 do		begin			ptrToSourceLocInfo:=@MyPortPtr^.PortInfo;			ptrToDestLocInfo:=@MyWindPtr^.PortInfo;			ptrToSourceRect:=@TheSourceRect;			ptrToDestPoint:=@TheSourceRect.TopLeft;			mode:=modeCopy;			MaskHandle:=Handle(MyWindPtr^.VisRgn);		end;	PPB2:=PPB1;	PPB2.ptrToDestPoint:=@TheDestPoint;	PPB3:=PPB2;	PPB3.ptrToDestLocInfo:=@MyPortPtr^.PortInfo;	PPB3.MaskHandle:=Handle(MyPortPtr^.VisRgn);	PPB4:=PPB1;	PPB4.MaskHandle:=Handle(PFVisRgn);	PPB5:=PPB2;	PPB5.MaskHandle:=Handle(PFVisRgn);end;Procedure CloseMyStuff;begin	DisposeRgn(PFRgn);	DisposeRgn(PFVisRgn);	ClosePort(MyPortPtr);	Dispose(MyPortPtr);	Dispose(MyBitMapPtr);	Dispose(MyLocInfoPtr);	CloseWindow(MyWindPtr);end;procedure WaitAtLeast(time:Integer);begin	while TickCount<Time+OldTickCount do		;	OldTickCount:=TickCount;end;procedure OffsetPt(var ThePoint:point;dh,dv:integer);begin	SetPt(ThePoint,ThePoint.h+dh,ThePoint.v+dv);end;Procedure DrawBigP(static BigPAnimation,X,Y:integer);		begin	SetRect(TheSourceRect,0,0,BigPManWidth*Times,BigPManHeight);	TheDestPoint:=TheSourceRect.TopLeft;	OffsetRect(TheSourceRect,(BigPAnimation*BigPManWidth+BigPManX)*Times,BigPManY);	OffsetPt(TheDestPoint,(X+PFX)*Times,Y+PFY);	PaintPixels(PPB5);end;Procedure DrawP;		var	TheRect,Rect1,Rect2:Rect;		begin	SetRect(TheRect,0,0,PManWidth*Times,PManHeight);	Rect1:=TheRect;	OffsetRect(Rect1,(PAnimation*PManWidth+PManX)*Times,PDirection*PManHeight+PManY);	Rect2:=TheRect;	OffsetRect(Rect2,(PX+PFX- PManWidth div 2)*Times,PY+PFY-PManHeight div 2);	TheSourceRect:=TheRect;	OffsetRect(TheSourceRect,(PXOld+PFX- PManWidth div 2)*Times,PYOld+PFY-PManHeight div 2);	PaintPixels(PPB4);	TheSourceRect:=Rect1;	TheDestPoint:=Rect2.TopLeft;	PaintPixels(PPB5);end;	Procedure DrawG(G:Integer);		var	TheRect,Rect1,Rect2:Rect;	TheG:integer;		begin	TheG:=G;	if GWellness[G]>0 then		if GWellness[G]>40 then			TheG:=4		else			if (GWellness[G] div 2) mod 2=0 then				TheG:=4			else				TheG:=5	else		if GWellness[G]=-1 then			TheG:=6;	if TheG<>6 then		SetRect(TheRect,0,0,GWidth*Times,GHeight)	else		SetRect(TheRect,0,0,GWidth*Times,GHeight);			TheSourceRect:=TheRect;	OffsetRect(TheSourceRect,(PFX+GXOld[G]-GWidth div 2)*Times,PFY+GYOld[G]-GHeight div 2);			Rect1:=TheRect;	Rect2:=TheRect;	OffsetRect(Rect1,(GsX+GAnimation[G]*GWidth+TheG*GWidth*2)*Times,GsY+GDirection[G]*GHeight);	OffsetRect(Rect2,(PFX+GX[G]-GWidth div 2)*Times,PFY+GY[G]-GHeight div 2);	PaintPixels(PPB4);	TheSourceRect:=Rect1;	TheDestPoint:=Rect2.TopLeft;	PaintPixels(PPB5);end;Procedure Scene1;var	i,j:integer;	TheRect:Rect;		begin	SetRect(TheRect,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);	SetPort(myWindPtr);	EraseRect(TheRect);	SetPort(myPortPtr);	EraseRect(TheRect);			PX:=-5;	PY:=35;	PXOld:=PX;	PYOld:=PY;	PDirection:=0;	GX[0]:=-15;	GX[1]:=-22;	GX[2]:=-29;	GX[3]:=-36;	GXOld[0]:=GX[0];	GXOld[1]:=GX[1];	GXOld[2]:=GX[2];	GXOld[3]:=GX[3];	for i:=0 to 3 do		begin			GY[i]:=35;			GYOld[i]:=GY[i];			GWellNess[i]:=0;			GDirection[i]:=0;			GAnimation[i]:=0;		end;	for i:= 0 to 78 do		begin			DrawP;			PAnimation:=i mod 4;			PXOld:=PX;			PX:=PX+1;			for j:=0 to 3 do				begin					GXOld[j]:=GX[j];					GX[j]:=GX[j]+1;					GAnimation[j]:=(GAnimation[j]+1) mod 2;					DrawG(j);				end;			waitatleast(5);		end;			waitatleast(30);	for i:=0 to 3 do		GDirection[i]:=2;			for i:= 0 to 90 do		begin			DrawBigP(i mod 4,75-i,27);			for j:=0 to 3 do				begin					DrawG(j);					GXOld[j]:=GX[j];					GX[j]:=GX[j]-1;					GAnimation[j]:=(GAnimation[j]+1) mod 2;				end;			waitatleast(5);		end;end;Procedure Scene2;var	i,j:integer;	TheRect:Rect;		begin	SetRect(TheREct,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);	SetPort(myWindPtr);	EraseRect(TheREct);	SetPort(myPortPtr);	EraseRect(TheRect);			PX:=-5;	PY:=35;	PXOld:=PX;	PYOld:=PY;	PDirection:=0;	GX[0]:=-20;	GX[1]:=80;	GXOld[0]:=GX[0];	GXOld[1]:=GX[1];	GDirection[0]:=0;	GDirection[1]:=2;	for i:=0 to 1 do		begin			GY[i]:=35;			GYOld[i]:=GY[i];			GWellNess[i]:=0;			GAnimation[i]:=0;		end;	for i:= 0 to 30 do		begin			DrawP;			PAnimation:=i mod 4;			PXOld:=PX;			PX:=PX+1;			for j:=0 to 1 do				begin					GXOld[j]:=GX[j];					GX[j]:=GX[j]+1-2*j;					GAnimation[j]:=(GAnimation[j]+1) mod 2;					DrawG(j);				end;			waitatleast(5);		end;				PDirection:=1;	for i:= 0 to 15 do		begin			DrawP;			PAnimation:=i mod 4;			PYOld:=PY;			PY:=PY-1;			for j:=0 to 1 do				begin					GXOld[j]:=GX[j];					GX[j]:=GX[j]+1-2*j;					GAnimation[j]:=(GAnimation[j]+1) mod 2;					DrawG(j);				end;			waitatleast(5);		end;				for i:= 0 to 16 do		begin			DrawP;			PAnimation:=i mod 4;			PYOld:=PY;			PY:=PY-1;			if i mod 2 = 0 then			for j:=0 to 1 do				begin					GXOld[j]:=GX[j];					GX[j]:=GX[j]-1+2*j;					GAnimation[j]:=(GAnimation[j]+1) mod 2;					DrawG(j);				end;			waitatleast(5);		end;	PDirection:=0;	PAnimation:=2;	DrawP;	WaitAtLeast(180);end;		Procedure DrawAP(static X,Y:integer);begin	SetRect(TheSourceRect,0,0,PManWidth*Times,PManHeight);	TheDestPoint:=TheSourceRect.topLeft;	OffsetRect(TheSourceRect,(PManWidth+PManX)*Times,PManY);	OffsetPt(TheDestPoint,X*Times,Y);	PaintPixels(PPB3);	PaintPixels(PPB2);end;Procedure DrawPLeft;var	TheRect:Rect;	i:integer;		begin	SetRect(TheRect,LivesX*Times,LivesY,MyWindPtr^.PortRect.Right,LivesY+PManHeight);	SetPort(MyWindPtr);	EraseRect(TheRect);	SetPort(MyPortPtr);	EraseRect(TheRect);	for i:=0 to PLives-1 do		DrawAP(LivesX+(PManWidth+1)*i,LivesY);end;	Procedure DrawFruitLevel(static X,Y,Fruit:integer);begin	SetRect(TheSourceRect,0,0,FruitWidth*Times,FruitHeight);	TheDestPoint:=TheSourceRect.TopLeft;	OffsetRect(TheSourceRect,(FruitX+Fruit*FruitWidth)*Times,FruitY);	OffsetPt(TheDestPoint,X*Times,Y);	PaintPixels(PPB3);	PaintPixels(PPB2);end;Procedure DrawLevel;var	TheRect:Rect;	i:Integer;		begin	SetRect(TheRect,LevelX*Times,0,(LevelX+FruitWidth)*Times,LevelY+FruitHeight);	SetPort(myWindPtr);	EraseRect(TheRect);	SetPort(MyPortPtr);	EraseRect(TheRect);	for i:=0 to Plevel-1 do		DrawFruitLevel(LevelX,LevelY-(FruitHeight+1)*i,i mod 2);end;Procedure DrawNumber(static X,Y,Number:integer);begin	SetRect(TheSourceRect,0,0,NumberWidth*Times,NumberHeight);	TheDestPoint:=TheSourceRect.TopLeft;	OffsetRect(TheSourceRect,(NumbersX+Number*NumberWidth)*Times,NumbersY);	OffsetPt(TheDestPoint,X*Times,Y);	PaintPixels(PPB2);	PaintPixels(PPB3);end;Procedure DrawScore;var	Score:str255;	i:integer;		begin	Score:=Int2String(PScore);	for i:=0 to length(Score)-1 do		DrawNumber(ScoreX-i*(NumberWidth+1),ScoreY,ord(Score[length(Score)-i])-ord('0'));end;procedure ResetGhosts;var	i:integer;		begin	for i:=0 to 3 do		begin			GX[i]:=3;			GY[i]:=3;			GXOld[i]:=GX[i];			GYOld[i]:=GY[i];			GXTest[i]:=0;			GYTest[i]:=0;			GXPlus[i]:=0;			GYPlus[i]:=0;			GXPlusNew[i]:=0;			GYPlusNew[i]:=0;		end;end;procedure ResetGhosts1;var	i:integer;		begin	for i:=0 to 3 do		begin			GDirection[i]:=0;			GDirectionNew[i]:=0;			GAnimation[i]:=0;			GWellNess[i]:=0;			GTimer[i]:=0;			GRunAway[i]:=0;		end;end;Procedure ResetStuff;var	i:integer;		begin	BigDotBlink:=1;	GameTime:=0;			PX:=33;	PY:=53;	PXOld:=PX;	PYOld:=PY;	PXTest:=0;	PYTest:=0;	PXPlus:=0;	PYPlus:=0;	PXPlusNew:=0;	PYPlusNew:=0;	PDirection:=0;	PDirectionNew:=0;	PAnimation:=0;		ResetGhosts;	ResetGhosts1;		GX[0]:=33;	GY[0]:=25;	GXPlus[0]:=1;	GYPlus[0]:=0;	GDirection[0]:=0;	GTimer[0]:=0;	GRunAway[0]:=25-5*PLevel;	if GRunAway[0]<0 then		GRunAway[0]:=0;	GX[1]:=27;	GY[1]:=31;	GXPlus[1]:=0;	GYPlus[1]:=1;	GDirection[1]:=3;	GTimer[1]:=25-5*PLevel;	if GTimer[1]<1 then		GTimer[1]:=1;	GX[2]:=39;	GY[2]:=31;	GXPlus[2]:=0;	GYPlus[2]:=1;	GDirection[2]:=3;	GTimer[2]:=40-5*PLevel;	if GTimer[2]<1 then		GTimer[2]:=1;	GX[3]:=33;	GY[3]:=35;	GXPlus[3]:=0;	GYPlus[3]:=-1;	GDirection[3]:=1;	GTimer[3]:=60-5*PLevel;	if GTimer[3]<1 then		GTimer[3]:=1;		for i:=0 to 3 do		begin			GXHome[i]:=GX[i];			GYHome[i]:=GY[i];		end;			GYHome[0]:=GYHome[0]+5;	DrawPLeft;	DrawLevel;	DrawScore;end;	Procedure ResetGame;var	TheRect:rect;begin	MazeDotsLeft:=228;	PLives:=2;	PLevel:=1;	PScore:=0;	ThePath:=NewPath;	SetRect(TheRect,0,0,(PFX+PFWidth)*Times,NumberHeight);	SetPort(myWindPtr);	EraseRect(TheRect);	SetPort(MyPortPtr);	EraseRect(TheRect);	ResetStuff;	SetRect(TheSourceRect,NewPFX*Times,NewPFY,(NewPFX+NewPFWidth)*Times,NewPFY+NewPFHeight);	SetPt(TheDestPoint,PFX*Times,PFY);	PaintPixels(PPB3);	PaintPixels(PPB2);end;Procedure HandleKeyDown(Event:EventRecord);var	ch:char;		begin	ch:=chr(Event.Message);	case ch of		'a','A':			begin				PYPlusNew:=-1;				PXPlusNew:=0;				PDirectionNew:=1;			end;		'z','Z':				begin					PYPlusNew:=1;					PXPlusNew:=0;					PDirectionNew:=3;				end;		'k','K':			begin				PXPlusNew:=1;				PYPlusNew:=0;				PDirectionNew:=0;			end;		'j','J':			begin				PXPlusNew:=-1;				PYPlusNew:=0;				PDirectionNew:=2;			end;		'P','p':			GamePause:=Not GamePause;	end;end;Procedure EraseDot;var	TheRect:Rect;		begin	SetRect(TheRect,0,0,1*Times,1);	OffsetRect(TheRect,(PX+PFX)*Times,PY+PFY);	SetPort(myPortPtr);	EraseRect(TheRect);end;Procedure EraseBigDot;var	TheRect:Rect;		begin	SetRect(TheRect,0,0,BigDotWidth*Times,BigDotHeight);	OffsetRect(TheRect,(PX+PFX-BigDotWidth div 2)*Times,PY+PFY-BigDotHeight div 2);	SetPort(myPortPtr);	EraseRect(TheRect);end;Procedure EraseFruit;var	TheRect:Rect;		begin	SetRect(TheRect,0,0,FruitWidth*Times,FruitHeight);	OffsetRect(TheRect,(FruitPosX+PFX)*Times,FruitPosY+PFY);	SetPort(myPortPtr);	EraseRect(TheRect);end;Procedure PDie;var	i:integer;		begin	ThePath[33,41]:='C';	EraseFruit;	SetRect(TheSourceRect,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);	PaintPixels(PPB1);	PDirection:=1;	for i:= 0 to 2 do		begin			PAnimation:=i;			DrawP;			WaitAtLeast(20);		end;	PDirection:=4;	for i:= 0 to 3 do		begin			PAnimation:=i;			DrawP;			WaitAtLeast(20);		end;			PLives:=PLives-1;	if PLives<0 then		begin			WaitAtLeast(120);			ResetGame;		end;	Resetstuff;			SetRect(TheSourceRect,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);	PaintPixels(PPB1);end;Procedure PNextLevel;var	i:integer;begin	ThePath[33,41]:='C';	EraseFruit;			PDirection:=0;	PAnimation:=0;	DrawP;	WaitAtLeast(30);	for i:= 0 to 9 do		begin			if i mod 2=0 then				begin					SetRect(TheSourceRect,WhitePFX*Times,WhitePFY,(WhitePFX+WhitePFWidth)*Times,WhitePFY+WhitePFHeight);					SetPt(TheDestPoint,PFX*Times,PFY);					PaintPixels(PPB2);				end			else				begin					SetRect(TheSourceRect,PFX*Times,PFY,(PFX+PFWidth)*Times,PFY+PFHeight);					PaintPixels(PPB1);				end;			WaitAtLeast(20);		end;			if PLevel mod 2 = 0 then		if PLevel mod 4 = 0 then			Scene2		else			Scene1;				MazeDotsLeft:=228;	ThePath:=NewPath;	PLevel:=PLevel+1;	PLives:=PLives+1;	Resetstuff;					SetRect(TheSourceRect,NewPFX*Times,NewPFY,(NewPFX+NewPFWidth)*Times,NewPFY+NewPFHeight);	SetPt(TheDestPoint,PFX*Times,PFY);	PaintPixels(PPB3);	PaintPixels(PPB2);end;	procedure PMove;var 	i:integer;		begin	if (PXPlusNew<>0) or (PYPlusNew<>0) then 		begin			PXTest:=PX+PXPlusNew;			PYTest:=PY+PYPlusNew;			if (ThePath[PXTest,PYTest] <> '0')  and (ThePath[PXTest,PYTest] <> 'G') then				begin					PXOld:=PX;					PYOld:=PY;					PX:=PXTest;					PY:=PYTest;					PXPlus:=PXPlusNew;					PYPlus:=PYPlusNew;					PDirection:=PDirectionNew;					DrawP;					PAnimation:=(PAnimation+1) mod 4				end			else				if (PXPlus<>0) or (PYPlus<>0) then					begin						PXTest:=PX+PXPlus;						PYTest:=PY+PYPlus;						if (ThePath[PXTest,PYTest] <> '0')  and (ThePath[PXTest,PYTest] <> 'G') then							begin								PXOld:=PX;								PYOld:=PY;								PX:=PXTest;								PY:=PYTest;														DrawP;								PAnimation:=(PAnimation+1) mod 4;							end						else							DrawP;					end						else							DrawP;				end			else			if (PXPlus<>0) or (PYPlus<>0) then			begin				PXTest:=PX+PXPlus;				PYTest:=PY+PYPlus;				if (ThePath[PXTest,PYTest] <> '0')  and (ThePath[PXTest,PYTest] <> 'G') then					begin						PXOld:=PX;						PYOld:=PY;						PX:=PXTest;						PY:=PYTest;												DrawP;												PAnimation:=(PAnimation+1) mod 4;					end				else					DrawP;			end				else					DrawP;		if PX<-5 then			PX:=71;		if PX>71 then			PX:=-5;		case ThePath[PX,PY] of		'A':			begin				PScore:=PScore+1;				DrawScore;				MazeDotsLeft:=MazeDotsLeft-1;				ThePath[PX,PY]:='C';				EraseDot;			end;		'B':			begin				PScore:=PScore+5;				DrawScore;				MazeDotsLeft:=MazeDotsLeft-1;				ThePath[PX,PY]:='C';				EraseBigDot;				for i:=0 to 3 do					if (GWellness[i]<>-1) then						begin							GWellness[i]:=100-10*PLevel;							if GWellness[i]<10 then								GWellness[i]:=10;							GXPlus[i]:=-GXPlus[i];							GYPlus[i]:=-GYPlus[i];							GDirection[i]:=(GDirection[i]+2) mod 4;						end;			end;		'K':			begin				PScore:=PScore+10+5*PLevel;				DrawScore;				ThePath[PX,PY]:='C';				EraseFruit;			end;		end;				if MazeDotsLeft=0 then			PNextLevel;					for i:=0 to 3 do			if (GX[i]=PX) and (GY[i]=PY) then				if GWellness[i]=0 then					PDie				else					if GWellness[i]>0 then						begin							GWellness[i]:=-1;							PScore:=PScore+10+5*PLevel;							DrawScore;						end;	end;procedure GMove2(static G:integer);	var		Temp:integer;begin								GXTest[G]:=GX[G]-GYPlus[G];								GYTest[G]:=GY[G]-GXPlus[G];								if (ThePath[GXTest[G],GYTest[G]] <> '0') 								and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1))								and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then									begin										GXOld[G]:=GX[G];										GYOld[G]:=GY[G];										GX[G]:=GXTest[G];										GY[G]:=GYTest[G];																				Temp:=-GXPlus[G];										GXPlus[G]:=-GYPlus[G];										GYPlus[G]:=Temp;																				if GXPlus[G]=1 then											GDirection[G]:=0;										if GXPlus[G]=-1 then											GDirection[G]:=2;										if GYPlus[G]=1 then											GDirection[G]:=3;										if GYPlus[G]=-1 then											GDirection[G]:=1;										DrawG(G);										GAnimation[G]:=(GAnimation[G]+1) mod 2									end								else									begin										GXTest[G]:=GX[G]-GXPlusNew[G];										GYTest[G]:=GY[G]-GYPlusNew[G];										if (ThePath[GXTest[G],GYTest[G]] <> '0') 										and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1))										and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then											begin												GXOld[G]:=GX[G];												GYOld[G]:=GY[G];												GX[G]:=GXTest[G];												GY[G]:=GYTest[G];												GXPlus[G]:=-GXPlusNew[G];												GYPlus[G]:=-GYPlusNew[G];																								GDirection[G]:=(GDirectionNew[G]+2) mod 4;																		DrawG(G);												GAnimation[G]:=(GAnimation[G]+1) mod 2											end										else											begin												GXTest[G]:=GX[G]-GXPlus[G];												GYTest[G]:=GY[G]-GYPlus[G];												if (ThePath[GXTest[G],GYTest[G]] <> '0') 												and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1))												and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then													begin														GXOld[G]:=GX[G];														GYOld[G]:=GY[G];														GX[G]:=GXTest[G];														GY[G]:=GYTest[G];														GXPlus[G]:=-GXPlus[G];														GYPlus[G]:=-GYPlus[G];														GDirection[G]:=(GDirection[G]+2) mod 4;																				DrawG(G);														GAnimation[G]:=(GAnimation[G]+1) mod 2													end;											end;									end;							end;procedure GMove3(static G:integer);	var		Temp:integer;			begin		if GX[G]<-5 then			GX[G]:=71;		if GX[G]>71 then			GX[G]:=-5;				if (ThePath[GX[G],GY[G]] = 'I') and (GWellness[G]=-1) then			begin				GWellness[G]:=0;				GTimer[G]:=30-5*PLevel;				If GTimer[G]<1 then					GTimer[G]:=1;			end;				if (ThePath[GX[G],GY[G]] = 'G') and (GTimer[G]=1) then			begin				GTimer[G]:=0;				GRunAway[G]:=50-5*PLevel;				If GRunAway[G]<0 then					GRunAway[G]:=0;			end;		if GRunAway[G]>0 then			begin				GRunAway[G]:=GRunAway[G]-1;				if GRunAway[G]=0 then					Begin						GXPlus[G]:=-GXPlus[G];						GYPlus[G]:=-GYPlus[G];						GDirection[G]:=(GDirection[G]+2) mod 4;					end;			end;					if GTimer[G]>1 then			GTimer[G]:=GTimer[G]-1;				if GWellness[G]>0 then			GWellness[G]:=GWellness[G]-1;					if (GX[G]=PX) and (GY[G]=PY) then			if GWellness[G]=0 then				PDie						else				if GWellness[G]>0 then					begin						GWellness[G]:=-1;						PScore:=PScore+10+5*PLevel;						DrawScore;					end;	end;	procedure GMove(static G:integer);	var		Temp:integer;			begin		if GXPlus[G]=0 then			begin				GYPlusNew[G]:=0;				if (GTimer[G]=0) and (GWellness[G]<>-1) then					if GX[G]>PX then						if (GWellness[G]=0) and (GRunAway[G]=0) then							begin								GXPlusNew[G]:=-1;								GDirectionNew[G]:=2;							end						else							begin								GXPlusNew[G]:=1;								GDirectionNew[G]:=0;							end					else						if GX[G]<PX then							if (GWellness[G]=0) and (GRunAway[G]=0) then								begin									GXPlusNew[G]:=1;									GDirectionNew[G]:=0;								end							else								begin									GXPlusNew[G]:=-1;									GDirectionNew[G]:=2;								end						else							begin								GXPlusNew[G]:=GXPlus[G];								GYPlusNew[G]:=GYPlus[G];								GDirectionNew[G]:=GDirection[G];							end				else					if GTimer[G]<>1 then						if GX[G]>GXHome[G] then							begin								GXPlusNew[G]:=-1;								GDirectionNew[G]:=2;							end						else							if GX[G]<GXHome[G] then								begin									GXPlusNew[G]:=1;									GDirectionNew[G]:=0;								end							else								begin									GXPlusNew[G]:=GXPlus[G];									GYPlusNew[G]:=GYPlus[G];									GDirectionNew[G]:=GDirection[G];								end					else						if GX[G]<33 then							begin								GXPlusNew[G]:=1;								GDirectionNew[G]:=0;							end						else							if GX[G]>33 then								begin									GXPlusNew[G]:=-1;									GDirectionNew[G]:=2;								end							else								begin									GXPlusNew[G]:=GXPlus[G];									GYPlusNew[G]:=GYPlus[G];									GDirectionNew[G]:=GDirection[G];								end			end		else			begin				GXPlusNew[G]:=0;				if (GTimer[G]=0) and (GWellness[G]<>-1) then					if GY[G]>PY then						if (GWellness[G]=0) and (GRunAway[G]=0) then							begin								GYPlusNew[G]:=-1;								GDirectionNew[G]:=1;							end						else							begin								GYPlusNew[G]:=1;								GDirectionNew[G]:=3;							end					else						if GY[G]<PY then							if (GWellness[G]=0) and (GRunAway[G]=0) then								begin									GYPlusNew[G]:=1;									GDirectionNew[G]:=3;								end							else								begin									GYPlusNew[G]:=-1;									GDirectionNew[G]:=1;								end						else							begin								GXPlusNew[G]:=GXPlus[G];								GYPlusNew[G]:=GYPlus[G];								GDirectionNew[G]:=GDirection[G];							end				else					if GTimer[G]<>1 then						if GY[G]<GYHome[G] then								begin									GYPlusNew[G]:=1;									GDirectionNew[G]:=3;								end							else								if GY[G]>GYHome[G] then									begin										GYPlusNew[G]:=-1;										GDirectionNew[G]:=1;									end								else									begin										GXPlusNew[G]:=GXPlus[G];										GYPlusNew[G]:=GYPlus[G];										GDirectionNew[G]:=GDirection[G];									end						else							if GY[G]<31 then								begin									GYPlusNew[G]:=1;									GDirectionNew[G]:=3;								end							else								if GY[G]>31 then									begin										GYPlusNew[G]:=-1;										GDirectionNew[G]:=1;									end								else									begin										GXPlusNew[G]:=GXPlus[G];										GYPlusNew[G]:=GYPlus[G];										GDirectionNew[G]:=GDirection[G];									end			end;				GXTest[G]:=GX[G]+GXPlusNew[G];		GYTest[G]:=GY[G]+GYPlusNew[G];		if (ThePath[GXTest[G],GYTest[G]] <> '0') 			and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1)) and (Random >-15000)			and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then			begin				GXOld[G]:=GX[G];				GYOld[G]:=GY[G];				GX[G]:=GXTest[G];				GY[G]:=GYTest[G];				GXPlus[G]:=GXPlusNew[G];				GYPlus[G]:=GYPlusNew[G];				GDirection[G]:=GDirectionNew[G];										DrawG(G);				GAnimation[G]:=(GAnimation[G]+1) mod 2			end		else			begin				GXTest[G]:=GX[G]+GXPlus[G];				GYTest[G]:=GY[G]+GYPlus[G];				if (ThePath[GXTest[G],GYTest[G]] <> '0')				and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1)) 				and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then					begin						GXOld[G]:=GX[G];						GYOld[G]:=GY[G];						GX[G]:=GXTest[G];						GY[G]:=GYTest[G];												DrawG(G);						GAnimation[G]:=(GAnimation[G]+1) mod 2					end						else							begin								GXTest[G]:=GX[G]+GYPlus[G];								GYTest[G]:=GY[G]+GXPlus[G];								if (ThePath[GXTest[G],GYTest[G]] <> '0')								and ((ThePath[GXTest[G],GYTest[G]] <> 'G') or (Gtimer[G]=1) or (GWellness[G]=-1))								and ((ThePath[GXTest[G],GYTest[G]] <> 'I') or (Gtimer[G]=1) or (GWellness[G]=-1)) then									begin										GXOld[G]:=GX[G];										GYOld[G]:=GY[G];										GX[G]:=GXTest[G];										GY[G]:=GYTest[G];																				Temp:=GXPlus[G];										GXPlus[G]:=GYPlus[G];										GYPlus[G]:=Temp;																				if GXPlus[G]=1 then											GDirection[G]:=0;										if GXPlus[G]=-1 then											GDirection[G]:=2;										if GYPlus[G]=1 then											GDirection[G]:=3;										if GYPlus[G]=-1 then											GDirection[G]:=1;																				DrawG(G);										GAnimation[G]:=(GAnimation[G]+1) mod 2									end								else							GMove2(G);					end;				end;					GMove3(G);	end;Procedure DrawBigDot(static X,Y,BigDot:integer);begin	SetRect(TheSourceRect,0,0,BigDotWidth*Times,BigDotHeight);	TheDestPoint:=TheSourceRect.topLeft;	OffsetRect(TheSourceRect,(BigDotX+BigDot*BigDotWidth)*Times,BigDotY);	OffsetPt(TheDestPoint,(X+PFX)*Times,Y+PFY);	PaintPixels(PPB2);	PaintPixels(PPB3);end;procedure BigDotToggle;begin	if ThePath[3,8] = 'B' then		DrawBigDot(2,7,BigDotBlink);	if ThePath[63,8] = 'B' then		DrawBigDot(62,8-1,BigDotBlink);	if ThePath[3,50] = 'B' then		DrawBigDot(2,49,BigDotBlink);	if ThePath[63,50] = 'B' then		DrawBigDot(62,49,BigDotBlink);	BigDotBlink:=1-BigDotBlink;end;Procedure DrawFruit(static Fruit:integer);begin	SetRect(TheSourceRect,0,0,FruitWidth*Times,FruitHeight);	TheDestPoint:=TheSourceRect.topLeft;	OffsetRect(TheSourceRect,(FruitX+Fruit*FruitWidth)*Times,FruitY);	OffsetPt(TheDestPoint,(FruitPosX+PFX)*Times,FruitPosY+PFY);	PaintPixels(PPB3);	PaintPixels(PPB2);end;procedure MyLoop;var	i:integer;begin	SectRgn(PFRgn,myWindPtr^.VisRgn,PFVisRgn);	WaitAtLeast(6);		if GameTime mod 10 = 0 then		BigDotToggle;	if GameTime mod 300 = 0 then		Begin			ThePath[33,41]:='K';			DrawFruit((PLevel-1) mod 2);		end;	if GameTime mod 300 = 150 then		begin			ThePath[33,41]:='C';			EraseFruit;		end;					PMove;					for i:=0 to 3 do		begin			if (GWellness[i]=0) and (ThePath[GX[i],GY[i]]='P') and ((Gametime mod 2 =0)or(PLevel>2)) then				GMove(i);			if (GWellness[i]>0) and ((Gametime mod 2 =0)or(PLevel>2)) then				GMove(i);			if (GWellness[i]=0) and (ThePath[GX[i],GY[i]]<>'P') then				GMove(i);			if GWellness[i]=-1 then				begin					GMove(i);					GMove(i);				end;		end;					if GameTime=0 then		WaitAtLeast(60);				GameTime:=GameTime+1;end;Function DAOpen:WindowPtr;var	OldPort:WindowPtr;		begin	OldPort:=GetPort;	if not MyStuffOpen then		begin			SetUpMyStuff;			ResetGame;			OldTickCount:=TickCount;			GamePause:=False;			MyStuffOpen:=True;			SetSysWindow(myWindPtr);		end	else		SelectWindow(myWindPtr);	DAOpen:=myWindPtr;	SetPort(OldPort);end;Procedure DAClose;begin	if myStuffOpen then		Begin			CloseMyStuff;			mystuffOpen:=False;		end;end;		Procedure DAAction(Code:integer;Param:Longint);var	OldPort:WindowPtr;begin	OldPort:=GetPort;	if myStuffOpen then	case code of		eventAction:			case EventRecordptr(Param)^.what of				keyDownEvt:HandleKeyDown(EventRecordptr(Param)^);				updateEvt:					begin						BeginUpdate(myWindPtr);						UpdateWindow;						EndUpdate(myWindPtr);					end;			end;		runAction:			if not GamePause then				MyLoop;		end;	SetPort(OldPort);end;Procedure DAInit(Code:integer);begin	if (code=0) and myStuffOpen then		DAClose	else		MyStuffOpen:=False;end;beginend.